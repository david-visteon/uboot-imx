/*
 * Copyright (C) 2010 Freescale Semiconductor, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#include <config.h>
#include <asm/arch/mx50.h>

#ifdef	CONFIG_FLASH_HEADER
#ifndef CONFIG_FLASH_HEADER_OFFSET
# error "Must define the offset of flash header"
#endif

#define CPU_2_BE_32(l) \
       ((((l) & 0x000000FF) << 24) | \
	(((l) & 0x0000FF00) << 8)  | \
	(((l) & 0x00FF0000) >> 8)  | \
	(((l) & 0xFF000000) >> 24))

#define MXC_DCD_ITEM(i, addr, val)   \
dcd_node_##i:                        \
        .word CPU_2_BE_32(addr) ;     \
        .word CPU_2_BE_32(val)  ;     \

#define DCDGEN_CHECKDATA(i,addr,mask,count) \
dcd_chkdata_##i:                         ; \
        .word CPU_2_BE_32(addr)                ;\
	.word CPU_2_BE_32(mask)                ;\
	.word CPU_2_BE_32(count)                ;\

.section ".text.flasheader", "x"
	b	_start
	.org	CONFIG_FLASH_HEADER_OFFSET
ivt_header:       .word 0x402000D1 /* Tag=0xD1, Len=0x0020, Ver=0x40 */
app_code_jump_v:  .word _start
reserv1:          .word 0x0
dcd_ptr:          .word dcd_hdr
boot_data_ptr:	  .word boot_data
self_ptr:         .word ivt_header
app_code_csf:     .word 0x0
reserv2:          .word 0x0

boot_data:        .word TEXT_BASE
image_len:        .word _end - TEXT_BASE
plugin:           .word 0x0

#if defined(CONFIG_LPDDR2)

/* DCD for LPDDR2 board */

/* Tag=0xD2, Len=4 + 76 + 16 + 844 + 26 = 966 (0x03c6), Ver=0x40. */
dcd_hdr:           .word 0x40c603D2

/* Tag = 0xCC, Len = 9*8 + 4 = 76(0x4C), Param = 4 */
write_ccm_dcd_cmd: .word 0x044C00CC

MXC_DCD_ITEM(01, 0x53fd4068 , 0xffffffff)
MXC_DCD_ITEM(02, 0x53fd406c , 0xffffffff)
MXC_DCD_ITEM(03, 0x53fd4070 , 0xffffffff)
MXC_DCD_ITEM(04, 0x53fd4074 , 0xffffffff)
MXC_DCD_ITEM(05, 0x53fd4078 , 0xffffffff)
MXC_DCD_ITEM(06, 0x53fd407c , 0xffffffff)
MXC_DCD_ITEM(07, 0x53fd4080 , 0xffffffff)
MXC_DCD_ITEM(08, 0x53fd4084 , 0xffffffff)
MXC_DCD_ITEM(09, 0x53FD4098 , 0x80000003)

/* poll for completion of CCM_CSR2 for update: use dummy write to wait */
/* Tag = 0xCF, Len = 1*12 + 4 = 16(0x10), Param = 4(Mast & Set bit are zero) */
check_data_dcd_cmd:       .word 0x241000CF
/* loop 0x1FFFFFFF times to make sure bit 2(ddr_clk_ref_pll_bsy) is cleared */
DCDGEN_CHECKDATA(1, CCM_BASE_ADDR + 0x8c, 0x04, 0x1FFFFFFF)

/* Tag=0xCC, Len=105*8 + 4 = 844(0x034C), Param=4 */
write_dcd_cmd:    .word 0x044C03CC

MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x6ac, 0x04000000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x6a4, 0x00380000)
MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x668, 0x00380000)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x698, 0x00380000)
MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x6a0, 0x00380000)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x6a8, 0x00380000)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x6b4, 0x00380000)
MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x498, 0x00380000)
MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x49c, 0x00380000)
MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x4f0, 0x00380000)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x500, 0x00380000)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x4c8, 0x00380000)
MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x528, 0x00380000)
MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4f4, 0x00380000)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4fc, 0x00380000)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4cc, 0x00380000)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x524, 0x00380000)

MXC_DCD_ITEM(18, DATABAHN_BASE_ADDR + 0x000, 0x00000500)
MXC_DCD_ITEM(19, DATABAHN_BASE_ADDR + 0x004, 0x00000000)
MXC_DCD_ITEM(20, DATABAHN_BASE_ADDR + 0x008, 0x0000001b)
MXC_DCD_ITEM(21, DATABAHN_BASE_ADDR + 0x00c, 0x0000d056)
MXC_DCD_ITEM(22, DATABAHN_BASE_ADDR + 0x010, 0x0000010b)
MXC_DCD_ITEM(23, DATABAHN_BASE_ADDR + 0x014, 0x00000a6b)
MXC_DCD_ITEM(24, DATABAHN_BASE_ADDR + 0x018, 0x02020d0c)
MXC_DCD_ITEM(25, DATABAHN_BASE_ADDR + 0x01c, 0x0c110302)
MXC_DCD_ITEM(26, DATABAHN_BASE_ADDR + 0x020, 0x05020503)
MXC_DCD_ITEM(27, DATABAHN_BASE_ADDR + 0x024, 0x00000105)
MXC_DCD_ITEM(28, DATABAHN_BASE_ADDR + 0x028, 0x01000403)
MXC_DCD_ITEM(29, DATABAHN_BASE_ADDR + 0x02c, 0x09040501)
MXC_DCD_ITEM(30, DATABAHN_BASE_ADDR + 0x030, 0x02000000)
MXC_DCD_ITEM(31, DATABAHN_BASE_ADDR + 0x034, 0x00000e02)
MXC_DCD_ITEM(32, DATABAHN_BASE_ADDR + 0x038, 0x00000006)
MXC_DCD_ITEM(33, DATABAHN_BASE_ADDR + 0x03c, 0x00002301)
MXC_DCD_ITEM(34, DATABAHN_BASE_ADDR + 0x040, 0x00050408)
MXC_DCD_ITEM(35, DATABAHN_BASE_ADDR + 0x044, 0x00000300)
MXC_DCD_ITEM(36, DATABAHN_BASE_ADDR + 0x048, 0x00260026)
MXC_DCD_ITEM(37, DATABAHN_BASE_ADDR + 0x04c, 0x00010000)

MXC_DCD_ITEM(38, DATABAHN_BASE_ADDR + 0x05c, 0x02000000)
MXC_DCD_ITEM(39, DATABAHN_BASE_ADDR + 0x060, 0x00000002)
MXC_DCD_ITEM(40, DATABAHN_BASE_ADDR + 0x064, 0x00000000)
MXC_DCD_ITEM(41, DATABAHN_BASE_ADDR + 0x068, 0x00000000)
MXC_DCD_ITEM(42, DATABAHN_BASE_ADDR + 0x06c, 0x00040042)
MXC_DCD_ITEM(43, DATABAHN_BASE_ADDR + 0x070, 0x00000001)
MXC_DCD_ITEM(44, DATABAHN_BASE_ADDR + 0x074, 0x00000000)
MXC_DCD_ITEM(45, DATABAHN_BASE_ADDR + 0x078, 0x00040042)
MXC_DCD_ITEM(46, DATABAHN_BASE_ADDR + 0x07c, 0x00000001)
MXC_DCD_ITEM(47, DATABAHN_BASE_ADDR + 0x080, 0x010b0000)
MXC_DCD_ITEM(48, DATABAHN_BASE_ADDR + 0x084, 0x00000060)
MXC_DCD_ITEM(49, DATABAHN_BASE_ADDR + 0x088, 0x02400018)
MXC_DCD_ITEM(50, DATABAHN_BASE_ADDR + 0x08c, 0x01000e00)
MXC_DCD_ITEM(51, DATABAHN_BASE_ADDR + 0x090, 0x0a010101)
MXC_DCD_ITEM(52, DATABAHN_BASE_ADDR + 0x094, 0x01011f1f)
MXC_DCD_ITEM(53, DATABAHN_BASE_ADDR + 0x098, 0x01010101)
MXC_DCD_ITEM(54, DATABAHN_BASE_ADDR + 0x09c, 0x00030101)
MXC_DCD_ITEM(55, DATABAHN_BASE_ADDR + 0x0a0, 0x00010000)
MXC_DCD_ITEM(56, DATABAHN_BASE_ADDR + 0x0a4, 0x00010000)
MXC_DCD_ITEM(57, DATABAHN_BASE_ADDR + 0x0a8, 0x00000000)
MXC_DCD_ITEM(58, DATABAHN_BASE_ADDR + 0x0ac, 0x0000ffff)
MXC_DCD_ITEM(59, DATABAHN_BASE_ADDR + 0x0c8, 0x02020101)
MXC_DCD_ITEM(60, DATABAHN_BASE_ADDR + 0x0cc, 0x01000000)
MXC_DCD_ITEM(61, DATABAHN_BASE_ADDR + 0x0d0, 0x01000201)
MXC_DCD_ITEM(62, DATABAHN_BASE_ADDR + 0x0d4, 0x00000200)
MXC_DCD_ITEM(63, DATABAHN_BASE_ADDR + 0x0d8, 0x00000102)
MXC_DCD_ITEM(64, DATABAHN_BASE_ADDR + 0x0dc, 0x0000ffff)
MXC_DCD_ITEM(65, DATABAHN_BASE_ADDR + 0x0e0, 0x0000ffff)
MXC_DCD_ITEM(66, DATABAHN_BASE_ADDR + 0x0e4, 0x02020000)
MXC_DCD_ITEM(67, DATABAHN_BASE_ADDR + 0x0e8, 0x02020202)
MXC_DCD_ITEM(68, DATABAHN_BASE_ADDR + 0x0ec, 0x00000202)
MXC_DCD_ITEM(69, DATABAHN_BASE_ADDR + 0x0f0, 0x01010064)
MXC_DCD_ITEM(70, DATABAHN_BASE_ADDR + 0x0f4, 0x01010101)
MXC_DCD_ITEM(71, DATABAHN_BASE_ADDR + 0x0f8, 0x00010101)
MXC_DCD_ITEM(72, DATABAHN_BASE_ADDR + 0x0fc, 0x00000064)
MXC_DCD_ITEM(73, DATABAHN_BASE_ADDR + 0x100, 0x00000000)
MXC_DCD_ITEM(74, DATABAHN_BASE_ADDR + 0x104, 0x02000802)
MXC_DCD_ITEM(75, DATABAHN_BASE_ADDR + 0x108, 0x04080000)
MXC_DCD_ITEM(76, DATABAHN_BASE_ADDR + 0x10c, 0x04080408)
MXC_DCD_ITEM(77, DATABAHN_BASE_ADDR + 0x110, 0x04080408)
MXC_DCD_ITEM(78, DATABAHN_BASE_ADDR + 0x114, 0x03060408)
MXC_DCD_ITEM(79, DATABAHN_BASE_ADDR + 0x118, 0x01010002)
MXC_DCD_ITEM(80, DATABAHN_BASE_ADDR + 0x11c, 0x00000000)

MXC_DCD_ITEM(81, DATABAHN_BASE_ADDR + 0x200, 0x00000000)
MXC_DCD_ITEM(82, DATABAHN_BASE_ADDR + 0x204, 0x00000000)
MXC_DCD_ITEM(83, DATABAHN_BASE_ADDR + 0x208, 0xf5003a27)
MXC_DCD_ITEM(84, DATABAHN_BASE_ADDR + 0x20c, 0x074002e1)
MXC_DCD_ITEM(85, DATABAHN_BASE_ADDR + 0x210, 0xf5003a27)
MXC_DCD_ITEM(86, DATABAHN_BASE_ADDR + 0x214, 0x074002e1)
MXC_DCD_ITEM(87, DATABAHN_BASE_ADDR + 0x218, 0xf5003a27)
MXC_DCD_ITEM(88, DATABAHN_BASE_ADDR + 0x21c, 0x074002e1)
MXC_DCD_ITEM(89, DATABAHN_BASE_ADDR + 0x220, 0xf5003a27)
MXC_DCD_ITEM(90, DATABAHN_BASE_ADDR + 0x224, 0x074002e1)
MXC_DCD_ITEM(91, DATABAHN_BASE_ADDR + 0x228, 0xf5003a27)
MXC_DCD_ITEM(92, DATABAHN_BASE_ADDR + 0x22c, 0x074002e1)
MXC_DCD_ITEM(93, DATABAHN_BASE_ADDR + 0x230, 0x00000000)
MXC_DCD_ITEM(94, DATABAHN_BASE_ADDR + 0x234, 0x00810006)
MXC_DCD_ITEM(95, DATABAHN_BASE_ADDR + 0x238, 0x20099414)
MXC_DCD_ITEM(96, DATABAHN_BASE_ADDR + 0x23c, 0x000a1401)
MXC_DCD_ITEM(97, DATABAHN_BASE_ADDR + 0x240, 0x20099414)
MXC_DCD_ITEM(98, DATABAHN_BASE_ADDR + 0x244, 0x000a1401)
MXC_DCD_ITEM(99, DATABAHN_BASE_ADDR + 0x248, 0x20099414)
MXC_DCD_ITEM(100, DATABAHN_BASE_ADDR + 0x24c, 0x000a1401)
MXC_DCD_ITEM(101, DATABAHN_BASE_ADDR + 0x250, 0x20099414)
MXC_DCD_ITEM(102, DATABAHN_BASE_ADDR + 0x254, 0x000a1401)
MXC_DCD_ITEM(103, DATABAHN_BASE_ADDR + 0x258, 0x20099414)
MXC_DCD_ITEM(104, DATABAHN_BASE_ADDR + 0x25c, 0x000a1401)
MXC_DCD_ITEM(105, DATABAHN_BASE_ADDR + 0x000, 0x00000501)


/* poll for completion of HW_DRAM_CTL42 for DDR inti completion */
/* Tag = 0xCF, Len = 1*12 + 4 = 16(0x10), Param = 4 (Mast & Set bit are zero) */
check_ddr_init_dcd_cmd:       .word 0x341000CF
/* loop 0x1FFFFFFF times to make sure bit 4 (int_status) is set */
DCDGEN_CHECKDATA(2, DATABAHN_BASE_ADDR + 0xa8, 0x10, 0x1FFFFFFF)

#else

/* DCD for mDDR board */

/* Tag=0xD2, Len=4 + 76 + 16 + 796 + 26 = 908 (03A4), Ver=0x40. */
dcd_hdr:          .word 0x408C03D2

/* Tag = 0xCC, Len = 9*8 + 4 = 76(0x4C), Param = 4 */
write_ccm_dcd_cmd:        .word 0x044C00CC

MXC_DCD_ITEM(01, 0x53fd4068 , 0xffffffff)
MXC_DCD_ITEM(02, 0x53fd406c , 0xffffffff)
MXC_DCD_ITEM(03, 0x53fd4070 , 0xffffffff)
MXC_DCD_ITEM(04, 0x53fd4074 , 0xffffffff)
MXC_DCD_ITEM(05, 0x53fd4078 , 0xffffffff)
MXC_DCD_ITEM(06, 0x53fd407c , 0xffffffff)
MXC_DCD_ITEM(07, 0x53fd4080 , 0xffffffff)
MXC_DCD_ITEM(08, 0x53fd4084 , 0xffffffff)
MXC_DCD_ITEM(09, 0x53FD4098 , 0x80000004)

/* poll for completion of CCM_CSR2 for update: use dummy write to wait */
/* Tag = 0xCF, Len = 1*12 + 4 = 16(0x10), Param = 4(Mast & Set bit are zero) */
check_data_dcd_cmd:       .word 0x241000CF
/* loop 0x1FFFFFFF times to make sure bit 2(ddr_clk_ref_pll_bsy) is cleared */
DCDGEN_CHECKDATA(1, CCM_BASE_ADDR + 0x8c, 0x04, 0x1FFFFFFF)

write_dcd_cmd:    .word 0x041C03CC /* Tag=0xCC, Len=99*8 + 4, Param=4 */

MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x6ac, 0x02000000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x668, 0x00200000)
MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x66c, 0x00000000)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x670, 0x00000000)
MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x68c, 0x00000000)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x698, 0x00200000)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x6a0, 0x00200000)
MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x6a4, 0x00200000)
MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x6a8, 0x00200000)
MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x6b4, 0x00200000)

MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x498, 0x00200000)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x49c, 0x00200000)
MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x4c8, 0x00200000)
MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4cc, 0x00200000)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4f0, 0x00200000)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4f4, 0x00200000)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x4fc, 0x00200000)
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x500, 0x00200000)
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x524, 0x00200000)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x528, 0x00200000)

MXC_DCD_ITEM(21, DATABAHN_BASE_ADDR + 0x000, 0x00000100)
MXC_DCD_ITEM(22, DATABAHN_BASE_ADDR + 0x008, 0x00009c40)
MXC_DCD_ITEM(23, DATABAHN_BASE_ADDR + 0x014, 0x02000000)
MXC_DCD_ITEM(24, DATABAHN_BASE_ADDR + 0x018, 0x01010706)
MXC_DCD_ITEM(25, DATABAHN_BASE_ADDR + 0x01c, 0x080b0201)
MXC_DCD_ITEM(26, DATABAHN_BASE_ADDR + 0x020, 0x02000303)
MXC_DCD_ITEM(27, DATABAHN_BASE_ADDR + 0x024, 0x0136b002)
MXC_DCD_ITEM(28, DATABAHN_BASE_ADDR + 0x028, 0x01000101)
MXC_DCD_ITEM(29, DATABAHN_BASE_ADDR + 0x02c, 0x06030301)
MXC_DCD_ITEM(30, DATABAHN_BASE_ADDR + 0x030, 0x00000000)
MXC_DCD_ITEM(31, DATABAHN_BASE_ADDR + 0x034, 0x00000a02)
MXC_DCD_ITEM(32, DATABAHN_BASE_ADDR + 0x038, 0x00000003)
MXC_DCD_ITEM(33, DATABAHN_BASE_ADDR + 0x03c, 0x00001401)
MXC_DCD_ITEM(34, DATABAHN_BASE_ADDR + 0x040, 0x0005030f)
MXC_DCD_ITEM(35, DATABAHN_BASE_ADDR + 0x044, 0x00000200)
MXC_DCD_ITEM(36, DATABAHN_BASE_ADDR + 0x048, 0x00180018)
MXC_DCD_ITEM(37, DATABAHN_BASE_ADDR + 0x04c, 0x00010000)
MXC_DCD_ITEM(38, DATABAHN_BASE_ADDR + 0x05c, 0x01000000)
MXC_DCD_ITEM(39, DATABAHN_BASE_ADDR + 0x060, 0x00000001)
MXC_DCD_ITEM(40, DATABAHN_BASE_ADDR + 0x064, 0x00000000)
MXC_DCD_ITEM(41, DATABAHN_BASE_ADDR + 0x068, 0x00320000)
MXC_DCD_ITEM(42, DATABAHN_BASE_ADDR + 0x06c, 0x00000000)
MXC_DCD_ITEM(43, DATABAHN_BASE_ADDR + 0x070, 0x00000000)
MXC_DCD_ITEM(44, DATABAHN_BASE_ADDR + 0x074, 0x00320000)
MXC_DCD_ITEM(45, DATABAHN_BASE_ADDR + 0x080, 0x02000000)
MXC_DCD_ITEM(46, DATABAHN_BASE_ADDR + 0x084, 0x00000100)
MXC_DCD_ITEM(47, DATABAHN_BASE_ADDR + 0x088, 0x02400040)
MXC_DCD_ITEM(48, DATABAHN_BASE_ADDR + 0x08c, 0x01000000)
MXC_DCD_ITEM(49, DATABAHN_BASE_ADDR + 0x090, 0x0a000100)
MXC_DCD_ITEM(50, DATABAHN_BASE_ADDR + 0x094, 0x01011f1f)
MXC_DCD_ITEM(51, DATABAHN_BASE_ADDR + 0x098, 0x01010101)
MXC_DCD_ITEM(52, DATABAHN_BASE_ADDR + 0x09c, 0x00030101)
MXC_DCD_ITEM(53, DATABAHN_BASE_ADDR + 0x0a4, 0x00010000)
MXC_DCD_ITEM(54, DATABAHN_BASE_ADDR + 0x0ac, 0x0000ffff)
MXC_DCD_ITEM(55, DATABAHN_BASE_ADDR + 0x0c8, 0x02020101)
MXC_DCD_ITEM(56, DATABAHN_BASE_ADDR + 0x0cc, 0x00000000)
MXC_DCD_ITEM(57, DATABAHN_BASE_ADDR + 0x0d0, 0x01000202)
MXC_DCD_ITEM(58, DATABAHN_BASE_ADDR + 0x0d4, 0x02030302)
MXC_DCD_ITEM(59, DATABAHN_BASE_ADDR + 0x0d8, 0x00000001)
MXC_DCD_ITEM(60, DATABAHN_BASE_ADDR + 0x0dc, 0x0000ffff) /* sync mode */
MXC_DCD_ITEM(61, DATABAHN_BASE_ADDR + 0x0e0, 0x0000ffff)
MXC_DCD_ITEM(62, DATABAHN_BASE_ADDR + 0x0e4, 0x02020000)
MXC_DCD_ITEM(63, DATABAHN_BASE_ADDR + 0x0e8, 0x02020202)
MXC_DCD_ITEM(64, DATABAHN_BASE_ADDR + 0x0ec, 0x00000202)
MXC_DCD_ITEM(65, DATABAHN_BASE_ADDR + 0x0f0, 0x01010064)
MXC_DCD_ITEM(66, DATABAHN_BASE_ADDR + 0x0f4, 0x01010101)
MXC_DCD_ITEM(67, DATABAHN_BASE_ADDR + 0x0f8, 0x00010101)
MXC_DCD_ITEM(68, DATABAHN_BASE_ADDR + 0x0fc, 0x00000064)
MXC_DCD_ITEM(69, DATABAHN_BASE_ADDR + 0x104, 0x02000602)
MXC_DCD_ITEM(70, DATABAHN_BASE_ADDR + 0x108, 0x06120000)
MXC_DCD_ITEM(71, DATABAHN_BASE_ADDR + 0x10c, 0x06120612)
MXC_DCD_ITEM(72, DATABAHN_BASE_ADDR + 0x110, 0x06120612)
MXC_DCD_ITEM(73, DATABAHN_BASE_ADDR + 0x114, 0x01030612)
MXC_DCD_ITEM(74, DATABAHN_BASE_ADDR + 0x118, 0x01010002)

MXC_DCD_ITEM(75, DATABAHN_BASE_ADDR + 0x200, 0x00000000)
MXC_DCD_ITEM(76, DATABAHN_BASE_ADDR + 0x204, 0x00000000)
MXC_DCD_ITEM(77, DATABAHN_BASE_ADDR + 0x208, 0xf5002725)
MXC_DCD_ITEM(78, DATABAHN_BASE_ADDR + 0x20c, 0x070002d0)
MXC_DCD_ITEM(79, DATABAHN_BASE_ADDR + 0x210, 0xf5002725)
MXC_DCD_ITEM(80, DATABAHN_BASE_ADDR + 0x214, 0x074002d0)
MXC_DCD_ITEM(81, DATABAHN_BASE_ADDR + 0x218, 0xf5002725)
MXC_DCD_ITEM(82, DATABAHN_BASE_ADDR + 0x21c, 0x074002d0)
MXC_DCD_ITEM(83, DATABAHN_BASE_ADDR + 0x220, 0xf5002725)
MXC_DCD_ITEM(84, DATABAHN_BASE_ADDR + 0x224, 0x074002d0)
MXC_DCD_ITEM(85, DATABAHN_BASE_ADDR + 0x228, 0xf5002725)
MXC_DCD_ITEM(86, DATABAHN_BASE_ADDR + 0x22c, 0x074002d0)
MXC_DCD_ITEM(87, DATABAHN_BASE_ADDR + 0x230, 0x00000000)
MXC_DCD_ITEM(88, DATABAHN_BASE_ADDR + 0x234, 0x00800006)
MXC_DCD_ITEM(89, DATABAHN_BASE_ADDR + 0x238, 0x200e1014)
MXC_DCD_ITEM(90, DATABAHN_BASE_ADDR + 0x23c, 0x000d9f01)
MXC_DCD_ITEM(91, DATABAHN_BASE_ADDR + 0x240, 0x200e1014)
MXC_DCD_ITEM(92, DATABAHN_BASE_ADDR + 0x244, 0x000d9f01)
MXC_DCD_ITEM(93, DATABAHN_BASE_ADDR + 0x248, 0x200e1014)
MXC_DCD_ITEM(94, DATABAHN_BASE_ADDR + 0x24c, 0x000d9f01)
MXC_DCD_ITEM(95, DATABAHN_BASE_ADDR + 0x250, 0x200e1014)
MXC_DCD_ITEM(96, DATABAHN_BASE_ADDR + 0x254, 0x000d9f01)
MXC_DCD_ITEM(97, DATABAHN_BASE_ADDR + 0x258, 0x200e1014)
MXC_DCD_ITEM(98, DATABAHN_BASE_ADDR + 0x25c, 0x000d9f01)
MXC_DCD_ITEM(99, DATABAHN_BASE_ADDR + 0x000, 0x00000101)


/* poll for completion of HW_DRAM_CTL42 for DDR inti completion */
/* Tag = 0xCF, Len = 1*12 + 4 = 16(0x10), Param = 4 (Mast & Set bit are zero) */
check_ddr_init_dcd_cmd:       .word 0x341000CF
/* loop 0x1FFFFFFF times to make sure bit 4 (int_status) is set */
DCDGEN_CHECKDATA(2, DATABAHN_BASE_ADDR + 0xa8, 0x10, 0x1FFFFFFF)

#endif

#endif
